#!/bin/bash

# üöÄ Setup script cho GitHub Actions CI/CD Pipeline
# Script n√†y s·∫Ω h∆∞·ªõng d·∫´n b·∫°n setup c√°c secrets v√† c·∫•u h√¨nh c·∫ßn thi·∫øt

set -e

echo "üöÄ WebsiteTimE - GitHub Actions Setup"
echo "======================================"
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_step() {
    echo -e "${BLUE}üìã $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    print_error "Kh√¥ng ph·∫£i l√† git repository. Vui l√≤ng ch·∫°y script trong th∆∞ m·ª•c d·ª± √°n."
    exit 1
fi

# Check if GitHub CLI is installed
if ! command -v gh &> /dev/null; then
    print_warning "GitHub CLI ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t."
    echo "Vui l√≤ng c√†i ƒë·∫∑t GitHub CLI ƒë·ªÉ t·ª± ƒë·ªông setup secrets:"
    echo "https://cli.github.com/"
    echo ""
    echo "Ho·∫∑c b·∫°n c√≥ th·ªÉ setup secrets th·ªß c√¥ng qua GitHub web interface."
    MANUAL_SETUP=true
else
    MANUAL_SETUP=false
fi

print_step "Ki·ªÉm tra c·∫•u tr√∫c d·ª± √°n..."

# Check if required files exist
required_files=(
    ".github/workflows/ci-cd.yml"
    ".github/workflows/deploy-production.yml"
    ".github/workflows/dependency-update.yml"
    ".github/workflows/code-quality.yml"
    "backend/package.json"
    "frontend/package.json"
    "docker-compose.yml"
)

for file in "${required_files[@]}"; do
    if [ -f "$file" ]; then
        print_success "T√¨m th·∫•y $file"
    else
        print_error "Kh√¥ng t√¨m th·∫•y $file"
        exit 1
    fi
done

echo ""
print_step "Chu·∫©n b·ªã setup GitHub Secrets..."

# List of required secrets
secrets=(
    "GEMINI_API_KEY:Google Gemini API Key"
    "DOCKER_USERNAME:Docker Hub Username"
    "DOCKER_PASSWORD:Docker Hub Password/Token"
    "SONAR_TOKEN:SonarCloud Token (optional)"
    "CODECOV_TOKEN:Codecov Token (optional)"
    "SLACK_WEBHOOK_URL:Slack Webhook URL (optional)"
    "PROD_API_URL:Production API URL"
    "PROD_APP_URL:Production App URL"
)

echo ""
echo "üìù Danh s√°ch secrets c·∫ßn thi·∫øt:"
echo "================================"

for secret in "${secrets[@]}"; do
    IFS=':' read -r key description <<< "$secret"
    echo "‚Ä¢ $key - $description"
done

echo ""

if [ "$MANUAL_SETUP" = true ]; then
    print_warning "Setup th·ªß c√¥ng qua GitHub web interface:"
    echo "1. V√†o repository tr√™n GitHub"
    echo "2. Settings ‚Üí Secrets and variables ‚Üí Actions"
    echo "3. Th√™m c√°c secrets ·ªü tr√™n"
    echo ""
else
    read -p "B·∫°n c√≥ mu·ªën setup secrets t·ª± ƒë·ªông? (y/n): " -n 1 -r
    echo ""
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_step "Setup secrets v·ªõi GitHub CLI..."
        
        # Check if user is logged in to GitHub CLI
        if ! gh auth status &> /dev/null; then
            print_warning "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p GitHub CLI."
            echo "Ch·∫°y: gh auth login"
            exit 1
        fi
        
        # Setup essential secrets
        echo ""
        print_step "Nh·∫≠p c√°c secrets c·∫ßn thi·∫øt:"
        
        read -p "üîë GEMINI_API_KEY: " -s gemini_key
        echo ""
        read -p "üê≥ DOCKER_USERNAME: " docker_username
        read -p "üê≥ DOCKER_PASSWORD: " -s docker_password
        echo ""
        read -p "üåê PROD_API_URL (e.g., https://api.yourdomain.com): " prod_api_url
        read -p "üåê PROD_APP_URL (e.g., https://yourdomain.com): " prod_app_url
        
        # Set secrets
        echo ""
        print_step "ƒêang setup secrets..."
        
        gh secret set GEMINI_API_KEY --body "$gemini_key"
        gh secret set DOCKER_USERNAME --body "$docker_username"
        gh secret set DOCKER_PASSWORD --body "$docker_password"
        gh secret set PROD_API_URL --body "$prod_api_url"
        gh secret set PROD_APP_URL --body "$prod_app_url"
        
        print_success "ƒê√£ setup c√°c secrets c∆° b·∫£n!"
        
        echo ""
        read -p "B·∫°n c√≥ mu·ªën setup c√°c secrets t√πy ch·ªçn? (y/n): " -n 1 -r
        echo ""
        
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            read -p "üìä SONAR_TOKEN (optional, Enter ƒë·ªÉ b·ªè qua): " sonar_token
            if [ ! -z "$sonar_token" ]; then
                gh secret set SONAR_TOKEN --body "$sonar_token"
            fi
            
            read -p "üìà CODECOV_TOKEN (optional, Enter ƒë·ªÉ b·ªè qua): " codecov_token
            if [ ! -z "$codecov_token" ]; then
                gh secret set CODECOV_TOKEN --body "$codecov_token"
            fi
            
            read -p "üì¢ SLACK_WEBHOOK_URL (optional, Enter ƒë·ªÉ b·ªè qua): " slack_webhook
            if [ ! -z "$slack_webhook" ]; then
                gh secret set SLACK_WEBHOOK_URL --body "$slack_webhook"
            fi
        fi
    fi
fi

echo ""
print_step "T·∫°o environments..."

if [ "$MANUAL_SETUP" = false ]; then
    # Create environments
    gh api repos/:owner/:repo/environments/staging --method PUT --field prevent_self_review=false || true
    gh api repos/:owner/:repo/environments/production --method PUT --field prevent_self_review=true || true
    print_success "ƒê√£ t·∫°o staging v√† production environments"
fi

echo ""
print_step "Ki·ªÉm tra c·∫•u h√¨nh Docker..."

# Check Docker files
if [ -f "backend/Dockerfile" ] && [ -f "frontend/Dockerfile" ]; then
    print_success "Docker files ƒë√£ s·∫µn s√†ng"
else
    print_error "Thi·∫øu Docker files"
fi

echo ""
print_step "T·∫°o file .env.example n·∫øu ch∆∞a c√≥..."

# Create .env.example for backend
if [ ! -f "backend/.env.example" ]; then
    cat > backend/.env.example << EOF
# Database
MONGODB_URI=mongodb://localhost:27017/qltime

# Authentication
JWT_SECRET=your_jwt_secret_here

# AI Integration
GEMINI_API_KEY=your_gemini_api_key_here

# Server
PORT=3001
NODE_ENV=development
EOF
    print_success "ƒê√£ t·∫°o backend/.env.example"
fi

# Create .env.local.example for frontend
if [ ! -f "frontend/.env.local.example" ]; then
    cat > frontend/.env.local.example << EOF
# API Configuration
NEXT_PUBLIC_API_URL=http://localhost:3001

# AI Integration
NEXT_PUBLIC_GEMINI_API_KEY=your_gemini_api_key_here
EOF
    print_success "ƒê√£ t·∫°o frontend/.env.local.example"
fi

echo ""
print_step "T·∫°o file .gitignore cho GitHub Actions artifacts..."

if ! grep -q "# GitHub Actions" .gitignore 2>/dev/null; then
    cat >> .gitignore << EOF

# GitHub Actions
.github/workflows/*.log
performance-report.json
complexity-report.json
security-audit.json
outdated-packages.txt
doc-report.md
EOF
    print_success "ƒê√£ c·∫≠p nh·∫≠t .gitignore"
fi

echo ""
print_success "üéâ Setup ho√†n t·∫•t!"
echo ""
echo "üìã C√°c b∆∞·ªõc ti·∫øp theo:"
echo "1. Commit v√† push c√°c thay ƒë·ªïi l√™n GitHub"
echo "2. Ki·ªÉm tra tab Actions ƒë·ªÉ xem workflows"
echo "3. T·∫°o Pull Request ƒë·ªÉ test CI pipeline"
echo "4. T·∫°o Release ƒë·ªÉ test production deployment"
echo ""
echo "üìö Xem th√™m h∆∞·ªõng d·∫´n t·∫°i: .github/README.md"
echo ""
print_warning "L∆∞u √Ω: H√£y ƒë·∫£m b·∫£o c√°c external services (SonarCloud, Codecov, Docker Hub) ƒë√£ ƒë∆∞·ª£c setup ƒë√∫ng c√°ch."
