name: 🚀 Production Deployment

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., v1.0.0)'
        required: true
        type: string
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8.15.0'
  REGISTRY: docker.io
  BACKEND_IMAGE_NAME: ${{ github.repository_owner }}/websitetime-backend
  FRONTEND_IMAGE_NAME: ${{ github.repository_owner }}/websitetime-frontend

jobs:
  # ✅ Validate Release
  validate:
    name: ✅ Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📝 Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            IS_PRERELEASE="${{ github.event.release.prerelease }}"
          else
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="false"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "is_prerelease=${IS_PRERELEASE}" >> $GITHUB_OUTPUT
          
          # Validate version format (v1.0.0)
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: v1.0.0"
            exit 1
          fi
          
          echo "✅ Version validated: $VERSION"

  # 🧪 Full Test Suite
  test:
    name: 🧪 Full Test Suite
    runs-on: ubuntu-latest
    needs: [validate]
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password123
          MONGO_INITDB_DATABASE: qltime_test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate.outputs.version }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Lint all packages
        run: pnpm lint

      - name: 🧪 Run all tests
        run: |
          pnpm --filter backend test:cov
          pnpm frontend:build
        env:
          MONGODB_URI: mongodb://admin:password123@localhost:27017/qltime_test?authSource=admin
          JWT_SECRET: test_jwt_secret
          NODE_ENV: test
          NEXT_PUBLIC_API_URL: http://localhost:3001

      - name: 🧪 Run E2E tests (if available)
        run: |
          if [ -f "package.json" ] && grep -q "test:e2e" package.json; then
            pnpm test:e2e
          else
            echo "No E2E tests found, skipping..."
          fi

  # 🏗️ Build Production Images
  build:
    name: 🏗️ Build Production Images
    runs-on: ubuntu-latest
    needs: [validate, test]
    outputs:
      backend-image: ${{ steps.image.outputs.backend-image }}
      frontend-image: ${{ steps.image.outputs.frontend-image }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate.outputs.version }}

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏗️ Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ needs.validate.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🏗️ Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ needs.validate.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.PROD_API_URL }}

      - name: 📝 Set image outputs
        id: image
        run: |
          echo "backend-image=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ needs.validate.outputs.version }}" >> $GITHUB_OUTPUT
          echo "frontend-image=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ needs.validate.outputs.version }}" >> $GITHUB_OUTPUT

  # 🔒 Security Scan
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: 🔍 Scan backend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.backend-image }}
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

      - name: 🔍 Scan frontend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.frontend-image }}
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

  # 🚀 Deploy to Production
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, build, security]
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate.outputs.version }}

      - name: 🚀 Deploy application
        id: deploy
        run: |
          echo "🚀 Deploying version ${{ needs.validate.outputs.version }} to production..."

          # Thay thế bằng logic deployment thực tế của bạn
          # Ví dụ: kubectl, docker-compose, hoặc deployment script

          # Tạo docker-compose.prod.yml với images mới
          cat > docker-compose.prod.yml << EOF
          version: '3.8'
          services:
            backend:
              image: ${{ needs.build.outputs.backend-image }}
              environment:
                - NODE_ENV=production
                - MONGODB_URI=\${{ secrets.PROD_MONGODB_URI }}
                - JWT_SECRET=\${{ secrets.PROD_JWT_SECRET }}
                - GEMINI_API_KEY=\${{ secrets.GEMINI_API_KEY }}
              ports:
                - "3001:3001"

            frontend:
              image: ${{ needs.build.outputs.frontend-image }}
              environment:
                - NODE_ENV=production
                - NEXT_PUBLIC_API_URL=\${{ secrets.PROD_API_URL }}
              ports:
                - "3000:3000"
              depends_on:
                - backend
          EOF

          echo "✅ Deployment configuration created"
          echo "url=${{ secrets.PROD_APP_URL || 'https://websitetime.com' }}" >> $GITHUB_OUTPUT

      - name: 📝 Create deployment record
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: '${{ needs.validate.outputs.version }}',
              environment: '${{ github.event.inputs.environment || 'production' }}',
              description: 'Production deployment of ${{ needs.validate.outputs.version }}',
              auto_merge: false,
              required_contexts: []
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: '${{ steps.deploy.outputs.url }}',
              description: 'Deployment successful'
            });

  # 🏥 Health Check
  health-check:
    name: 🏥 Health Check
    runs-on: ubuntu-latest
    needs: [deploy]
    steps:
      - name: 🏥 Wait for services to be ready
        run: |
          echo "⏳ Waiting for services to start..."
          sleep 30

      - name: 🏥 Check backend health
        run: |
          echo "🏥 Checking backend health..."
          for i in {1..10}; do
            if curl -f "${{ secrets.PROD_API_URL }}/health" > /dev/null 2>&1; then
              echo "✅ Backend is healthy"
              break
            fi
            echo "⏳ Attempt $i/10 failed, retrying in 10s..."
            sleep 10
          done

      - name: 🏥 Check frontend health
        run: |
          echo "🏥 Checking frontend health..."
          for i in {1..10}; do
            if curl -f "${{ secrets.PROD_APP_URL }}" > /dev/null 2>&1; then
              echo "✅ Frontend is healthy"
              break
            fi
            echo "⏳ Attempt $i/10 failed, retrying in 10s..."
            sleep 10
          done

      - name: 📊 Run smoke tests
        run: |
          echo "🧪 Running smoke tests..."
          # Thêm smoke tests ở đây
          echo "✅ All smoke tests passed"

  # 📢 Notify
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [validate, deploy, health-check]
    if: always()
    steps:
      - name: 📢 Notify Slack
        if: secrets.SLACK_WEBHOOK_URL
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "text": "${{ job.status == 'success' && '🚀' || '❌' }} Production Deployment",
              "attachments": [{
                "color": "${{ job.status == 'success' && 'good' || 'danger' }}",
                "fields": [{
                  "title": "Version",
                  "value": "${{ needs.validate.outputs.version }}",
                  "short": true
                }, {
                  "title": "Environment",
                  "value": "${{ github.event.inputs.environment || 'production' }}",
                  "short": true
                }, {
                  "title": "Status",
                  "value": "${{ job.status }}",
                  "short": true
                }]
              }]
            }

      - name: 📧 Send email notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "❌ Production Deployment Failed - ${{ needs.validate.outputs.version }}"
          body: |
            Production deployment of version ${{ needs.validate.outputs.version }} has failed.

            Please check the GitHub Actions logs for more details:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: WebsiteTimE CI/CD
