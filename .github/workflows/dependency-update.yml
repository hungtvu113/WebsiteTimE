name: üì¶ Dependency Updates

on:
  schedule:
    # Ch·∫°y v√†o 9:00 AM UTC m·ªói th·ª© 2
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: true
        default: 'minor'
        type: choice
        options:
          - patch
          - minor
          - major
          - all
      create_pr:
        description: 'Create pull request automatically'
        required: true
        default: true
        type: boolean

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8.15.0'

jobs:
  # üîç Check for Updates
  check-updates:
    name: üîç Check for Updates
    runs-on: ubuntu-latest
    outputs:
      has-updates: ${{ steps.check.outputs.has-updates }}
      update-summary: ${{ steps.check.outputs.update-summary }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: üì• Install dependencies
        run: pnpm install --frozen-lockfile

      - name: üîç Check for outdated packages
        id: check
        run: |
          echo "üîç Checking for outdated packages..."
          
          # Check outdated packages
          OUTDATED_OUTPUT=$(pnpm outdated --format json 2>/dev/null || echo '{}')
          
          # Count outdated packages
          OUTDATED_COUNT=$(echo "$OUTDATED_OUTPUT" | jq 'length // 0')
          
          if [ "$OUTDATED_COUNT" -gt 0 ]; then
            echo "has-updates=true" >> $GITHUB_OUTPUT
            echo "üì¶ Found $OUTDATED_COUNT outdated packages"
            
            # Create summary
            SUMMARY="Found $OUTDATED_COUNT outdated packages:\n"
            SUMMARY+=$(echo "$OUTDATED_OUTPUT" | jq -r 'to_entries[] | "- \(.key): \(.value.current) ‚Üí \(.value.wanted)"' | head -10)
            if [ "$OUTDATED_COUNT" -gt 10 ]; then
              SUMMARY+="\n... and $((OUTDATED_COUNT - 10)) more"
            fi
            
            echo "update-summary<<EOF" >> $GITHUB_OUTPUT
            echo -e "$SUMMARY" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "has-updates=false" >> $GITHUB_OUTPUT
            echo "‚úÖ All packages are up to date"
          fi

      - name: üìä Generate dependency report
        run: |
          echo "üìä Generating dependency report..."
          
          # Create reports directory
          mkdir -p reports
          
          # Generate detailed report
          pnpm outdated --format json > reports/outdated.json 2>/dev/null || echo '{}' > reports/outdated.json
          pnpm audit --format json > reports/audit.json 2>/dev/null || echo '{}' > reports/audit.json
          
          # Generate human-readable report
          cat > reports/dependency-report.md << EOF
          # üì¶ Dependency Report
          
          Generated on: $(date)
          
          ## üìä Summary
          - Total outdated packages: $(jq 'length // 0' reports/outdated.json)
          - Security vulnerabilities: $(jq '.metadata.vulnerabilities.total // 0' reports/audit.json)
          
          ## üì¶ Outdated Packages
          $(jq -r 'to_entries[] | "- **\(.key)**: \(.value.current) ‚Üí \(.value.wanted) (latest: \(.value.latest))"' reports/outdated.json)
          
          ## üîí Security Audit
          $(jq -r '.advisories // {} | to_entries[] | "- **\(.value.title)**: \(.value.severity) - \(.value.module_name)"' reports/audit.json)
          EOF

      - name: üì¶ Upload dependency report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-report
          path: reports/
          retention-days: 30

  # üîÑ Update Dependencies
  update-dependencies:
    name: üîÑ Update Dependencies
    runs-on: ubuntu-latest
    needs: [check-updates]
    if: needs.check-updates.outputs.has-updates == 'true'
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: üì• Install dependencies
        run: pnpm install --frozen-lockfile

      - name: üîÑ Update dependencies
        run: |
          echo "üîÑ Updating dependencies..."
          
          UPDATE_TYPE="${{ github.event.inputs.update_type || 'minor' }}"
          
          case $UPDATE_TYPE in
            "patch")
              echo "üì¶ Updating patch versions only..."
              pnpm update --latest --filter-prod
              ;;
            "minor")
              echo "üì¶ Updating minor versions..."
              pnpm update --latest
              ;;
            "major")
              echo "üì¶ Updating major versions (be careful!)..."
              pnpm update --latest --depth Infinity
              ;;
            "all")
              echo "üì¶ Updating all dependencies to latest..."
              pnpm update --latest --depth Infinity
              ;;
          esac

      - name: üß™ Run tests after update
        run: |
          echo "üß™ Running tests to verify updates..."
          
          # Install updated dependencies
          pnpm install
          
          # Run linting
          pnpm backend:lint || echo "‚ö†Ô∏è Backend linting failed, will be noted in PR"
          pnpm frontend:lint || echo "‚ö†Ô∏è Frontend linting failed, will be noted in PR"
          
          # Try to build
          pnpm build || echo "‚ö†Ô∏è Build failed, will be noted in PR"
          
          # Run tests if available
          if pnpm --filter backend test; then
            echo "‚úÖ Backend tests passed"
          else
            echo "‚ö†Ô∏è Backend tests failed, will be noted in PR"
          fi

      - name: üìù Generate update summary
        id: summary
        run: |
          echo "üìù Generating update summary..."
          
          # Get git diff for package files
          CHANGED_FILES=$(git diff --name-only | grep -E "(package\.json|pnpm-lock\.yaml)" || true)
          
          if [ -n "$CHANGED_FILES" ]; then
            echo "üì¶ Changed files:"
            echo "$CHANGED_FILES"
            
            # Create detailed summary
            SUMMARY="## üì¶ Dependency Updates\n\n"
            SUMMARY+="Update type: **${{ github.event.inputs.update_type || 'minor' }}**\n\n"
            SUMMARY+="### Changed files:\n"
            for file in $CHANGED_FILES; do
              SUMMARY+="- \`$file\`\n"
            done
            SUMMARY+="\n### Summary:\n"
            SUMMARY+="${{ needs.check-updates.outputs.update-summary }}\n\n"
            SUMMARY+="### ‚ö†Ô∏è Please review:\n"
            SUMMARY+="- Check for breaking changes in updated packages\n"
            SUMMARY+="- Run full test suite before merging\n"
            SUMMARY+="- Update documentation if needed\n"
            
            echo "summary<<EOF" >> $GITHUB_OUTPUT
            echo -e "$SUMMARY" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            echo "has-changes=true" >> $GITHUB_OUTPUT
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No changes detected"
          fi

      - name: üìù Create Pull Request
        if: steps.summary.outputs.has-changes == 'true' && (github.event.inputs.create_pr == 'true' || github.event_name == 'schedule')
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            üì¶ Update dependencies (${{ github.event.inputs.update_type || 'minor' }})
            
            - Updated dependencies to latest ${{ github.event.inputs.update_type || 'minor' }} versions
            - Automated update via GitHub Actions
          title: "üì¶ Dependency Updates (${{ github.event.inputs.update_type || 'minor' }})"
          body: ${{ steps.summary.outputs.summary }}
          branch: dependency-updates/${{ github.run_number }}
          delete-branch: true
          labels: |
            dependencies
            automated
            ${{ github.event.inputs.update_type || 'minor' }}

  # üîí Security Audit
  security-audit:
    name: üîí Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: üì• Install dependencies
        run: pnpm install --frozen-lockfile

      - name: üîí Run security audit
        run: |
          echo "üîí Running security audit..."
          
          # Run pnpm audit
          pnpm audit --audit-level moderate --format json > audit-results.json || true
          
          # Check for high/critical vulnerabilities
          HIGH_VULNS=$(jq '.metadata.vulnerabilities.high // 0' audit-results.json)
          CRITICAL_VULNS=$(jq '.metadata.vulnerabilities.critical // 0' audit-results.json)
          
          echo "üîí Security audit results:"
          echo "- Critical vulnerabilities: $CRITICAL_VULNS"
          echo "- High vulnerabilities: $HIGH_VULNS"
          
          if [ "$CRITICAL_VULNS" -gt 0 ] || [ "$HIGH_VULNS" -gt 0 ]; then
            echo "‚ùå Security vulnerabilities found!"
            jq '.advisories // {}' audit-results.json
            exit 1
          else
            echo "‚úÖ No critical or high vulnerabilities found"
          fi

      - name: üìä Upload audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: audit-results.json
          retention-days: 30
