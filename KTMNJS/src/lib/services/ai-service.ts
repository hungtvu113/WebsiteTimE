import { GoogleGenerativeAI } from "@google/generative-ai";
import { Task } from '../types';

// Kh·ªüi t·∫°o Gemini AI
let genAI: GoogleGenerativeAI | null = null;
let model: any = null;

// L·∫•y API key t·ª´ API route
const getApiKeyFromServer = async (): Promise<string | null> => {
  try {
    const response = await fetch('/api/ai/api-key');
    if (!response.ok) {
      console.error('Failed to get API key from server');
      return null;
    }
    const data = await response.json();
    return data.apiKey || null;
  } catch (error) {
    console.error('Error fetching API key:', error);
    return null;
  }
};

// Kh·ªüi t·∫°o AI service v·ªõi API key t·ª´ server
const initializeAI = async () => {
  if (model) return true; // ƒê√£ kh·ªüi t·∫°o r·ªìi

  const apiKey = await getApiKeyFromServer();
  if (apiKey && !genAI) {
    genAI = new GoogleGenerativeAI(apiKey);
    model = genAI.getGenerativeModel({ model: "gemini-2.5-flash-preview-05-20" });
  }
  return !!model;
};

// Chat history interface
export interface ChatMessage {
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

export const AIService = {
  // Ph√¢n t√≠ch n·ªôi dung c√¥ng vi·ªác v√† ƒë·ªÅ xu·∫•t ƒë·ªô ∆∞u ti√™n b·∫±ng AI
  suggestPriority: async (title: string, description?: string): Promise<'high' | 'medium' | 'low'> => {
    try {
      if (!(await initializeAI())) {
        // Fallback to keyword-based logic if AI not available
        return AIService.fallbackSuggestPriority(title, description);
      }

      const prompt = `
Ph√¢n t√≠ch c√¥ng vi·ªác sau v√† ƒë·ªÅ xu·∫•t ƒë·ªô ∆∞u ti√™n (high/medium/low):

Ti√™u ƒë·ªÅ: ${title}
M√¥ t·∫£: ${description || 'Kh√¥ng c√≥ m√¥ t·∫£'}

H√£y tr·∫£ v·ªÅ ch·ªâ m·ªôt t·ª´: "high", "medium", ho·∫∑c "low" d·ª±a tr√™n:
- T√≠nh kh·∫©n c·∫•p c·ªßa c√¥ng vi·ªác
- T·∫ßm quan tr·ªçng
- Deadline ng·∫ßm ƒë·ªãnh
- T·ª´ kh√≥a ch·ªâ ƒë·ªô ∆∞u ti√™n

Ch·ªâ tr·∫£ v·ªÅ m·ªôt t·ª´, kh√¥ng gi·∫£i th√≠ch.`;

      const result = await model.generateContent(prompt);
      const response = result.response.text().toLowerCase().trim();

      if (['high', 'medium', 'low'].includes(response)) {
        return response as 'high' | 'medium' | 'low';
      }

      return 'medium';
    } catch (error) {
      console.error("Error suggesting priority with AI:", error);
      return AIService.fallbackSuggestPriority(title, description);
    }
  },

  // Fallback method for priority suggestion
  fallbackSuggestPriority: (title: string, description?: string): 'high' | 'medium' | 'low' => {
    if (!title) return 'medium';

    const lowerTitle = title.toLowerCase();
    const lowerDesc = description?.toLowerCase() || '';

    const highPriorityKeywords = ['g·∫•p', 'kh·∫©n', 'ngay', 'quan tr·ªçng', 'deadline', 'h·∫°n ch√≥t'];
    const lowPriorityKeywords = ['nh·∫π nh√†ng', 'khi r·∫£nh', 'kh√¥ng g·∫•p', 'sau n√†y', 'ph·ª•'];

    for (const keyword of highPriorityKeywords) {
      if (lowerTitle.includes(keyword) || lowerDesc.includes(keyword)) {
        return 'high';
      }
    }

    for (const keyword of lowPriorityKeywords) {
      if (lowerTitle.includes(keyword) || lowerDesc.includes(keyword)) {
        return 'low';
      }
    }

    return 'medium';
  },
  
  // ƒê·ªÅ xu·∫•t th·ªùi gian ho√†n th√†nh d·ª±a tr√™n n·ªôi dung b·∫±ng AI
  suggestDueDate: async (title: string, description?: string): Promise<string | null> => {
    try {
      if (!(await initializeAI())) {
        return AIService.fallbackSuggestDueDate(title, description);
      }

      const today = new Date();
      const prompt = `
Ph√¢n t√≠ch c√¥ng vi·ªác sau v√† ƒë·ªÅ xu·∫•t s·ªë ng√†y c·∫ßn ƒë·ªÉ ho√†n th√†nh:

Ti√™u ƒë·ªÅ: ${title}
M√¥ t·∫£: ${description || 'Kh√¥ng c√≥ m√¥ t·∫£'}
Ng√†y hi·ªán t·∫°i: ${today.toLocaleDateString('vi-VN')}

H√£y tr·∫£ v·ªÅ ch·ªâ m·ªôt s·ªë nguy√™n (1-365) ƒë·∫°i di·ªán cho s·ªë ng√†y c·∫ßn ƒë·ªÉ ho√†n th√†nh c√¥ng vi·ªác n√†y.
Xem x√©t:
- ƒê·ªô ph·ª©c t·∫°p c·ªßa c√¥ng vi·ªác
- Th·ªùi gian th√¥ng th∆∞·ªùng c·∫ßn thi·∫øt
- T·ª´ kh√≥a v·ªÅ th·ªùi gian (g·∫•p, kh·∫©n, tu·∫ßn n√†y, th√°ng n√†y, etc.)

Ch·ªâ tr·∫£ v·ªÅ s·ªë nguy√™n, kh√¥ng gi·∫£i th√≠ch.`;

      const result = await model.generateContent(prompt);
      const response = result.response.text().trim();
      const daysToAdd = parseInt(response);

      if (isNaN(daysToAdd) || daysToAdd < 1 || daysToAdd > 365) {
        return AIService.fallbackSuggestDueDate(title, description);
      }

      const dueDate = new Date(today);
      dueDate.setDate(today.getDate() + daysToAdd);
      return dueDate.toISOString().split('T')[0];
    } catch (error) {
      console.error("Error suggesting due date with AI:", error);
      return AIService.fallbackSuggestDueDate(title, description);
    }
  },

  // Fallback method for due date suggestion
  fallbackSuggestDueDate: (title: string, description?: string): string | null => {
    try {
      const lowerTitle = title.toLowerCase();
      const lowerDesc = description?.toLowerCase() || '';

      const today = new Date();
      let daysToAdd = 7;

      if (lowerTitle.includes('g·∫•p') || lowerTitle.includes('kh·∫©n') || lowerDesc.includes('g·∫•p')) {
        daysToAdd = 1;
      } else if (lowerTitle.includes('tu·∫ßn n√†y') || lowerDesc.includes('tu·∫ßn n√†y')) {
        daysToAdd = 5;
      } else if (lowerTitle.includes('th√°ng') || lowerDesc.includes('th√°ng')) {
        daysToAdd = 30;
      }

      const dueDate = new Date(today);
      dueDate.setDate(today.getDate() + daysToAdd);
      return dueDate.toISOString().split('T')[0];
    } catch (error) {
      console.error("Error in fallback due date suggestion:", error);
      return null;
    }
  },
  
  // T√≥m t·∫Øt danh s√°ch c√¥ng vi·ªác b·∫±ng AI
  summarizeTasks: async (tasks: Task[]): Promise<string> => {
    try {
      if (!(await initializeAI())) {
        return AIService.fallbackSummarizeTasks(tasks);
      }

      const completed = tasks.filter(task => task.completed).length;
      const pending = tasks.length - completed;
      const completionRate = tasks.length > 0 ? Math.round((completed / tasks.length) * 100) : 0;
      const highPriorityPending = tasks.filter(task => task.priority === 'high' && !task.completed).length;

      // T·∫°o context cho AI
      const taskSummary = tasks.map(task =>
        `- ${task.title} (${task.priority} priority, ${task.completed ? 'completed' : 'pending'})`
      ).join('\n');

      const prompt = `
Ph√¢n t√≠ch danh s√°ch c√¥ng vi·ªác sau v√† t·∫°o m·ªôt b·∫£n t√≥m t·∫Øt th√¥ng minh b·∫±ng ti·∫øng Vi·ªát v·ªõi Markdown format:

## Th·ªëng k√™ hi·ªán t·∫°i:
- **T·ªïng s·ªë c√¥ng vi·ªác**: ${tasks.length}
- **ƒê√£ ho√†n th√†nh**: ${completed}
- **Ch∆∞a ho√†n th√†nh**: ${pending}
- **T·ª∑ l·ªá ho√†n th√†nh**: ${completionRate}%
- **C√¥ng vi·ªác ∆∞u ti√™n cao ch∆∞a ho√†n th√†nh**: ${highPriorityPending}

## Danh s√°ch c√¥ng vi·ªác:
${taskSummary || 'Kh√¥ng c√≥ c√¥ng vi·ªác n√†o'}

H√£y t·∫°o m·ªôt b·∫£n t√≥m t·∫Øt v·ªõi Markdown format bao g·ªìm:
1. **ƒê√°nh gi√° hi·ªán tr·∫°ng** - s·ª≠ d·ª•ng emoji v√† bold
2. **L·ªùi khuy√™n ho·∫∑c ƒë·ªông vi√™n** - s·ª≠ d·ª•ng blockquote
3. **G·ª£i √Ω h√†nh ƒë·ªông ti·∫øp theo** - s·ª≠ d·ª•ng danh s√°ch c√≥ d·∫•u ƒë·∫ßu d√≤ng

S·ª≠ d·ª•ng:
- **Bold** cho c√°c ƒëi·ªÉm quan tr·ªçng
- > Blockquote cho l·ªùi khuy√™n
- ‚Ä¢ Bullet points cho c√°c b∆∞·ªõc h√†nh ƒë·ªông
- üìä üìà ‚úÖ ‚ö° üéØ emoji ph√π h·ª£p

Gi·ªØ gi·ªçng ƒëi·ªáu th√¢n thi·ªán v√† t√≠ch c·ª±c.`;

      const result = await model.generateContent(prompt);
      const response = result.response.text().trim();

      return response || AIService.fallbackSummarizeTasks(tasks);
    } catch (error) {
      console.error("Error summarizing tasks with AI:", error);
      return AIService.fallbackSummarizeTasks(tasks);
    }
  },

  // Fallback method for task summarization
  fallbackSummarizeTasks: (tasks: Task[]): string => {
    try {
      const completed = tasks.filter(task => task.completed).length;
      const completionRate = tasks.length > 0 ? Math.round((completed / tasks.length) * 100) : 0;
      const highPriorityPending = tasks.filter(task => task.priority === 'high' && !task.completed).length;

      let summary = `B·∫°n ƒë√£ ho√†n th√†nh ${completed}/${tasks.length} c√¥ng vi·ªác (${completionRate}%). `;

      if (highPriorityPending > 0) {
        summary += `Hi·ªán c√≥ ${highPriorityPending} c√¥ng vi·ªác ∆∞u ti√™n cao c·∫ßn ho√†n th√†nh. `;
      }

      if (completionRate >= 80) {
        summary += 'B·∫°n ƒëang l√†m r·∫•t t·ªët! H√£y ti·∫øp t·ª•c ph√°t huy.';
      } else if (completionRate >= 50) {
        summary += 'B·∫°n ƒëang ti·∫øn tri·ªÉn t·ªët. C·ªë g·∫Øng ho√†n th√†nh c√°c c√¥ng vi·ªác c√≤n l·∫°i nh√©.';
      } else if (tasks.length > 0) {
        summary += 'B·∫°n c·∫ßn t·∫≠p trung h∆°n ƒë·ªÉ ho√†n th√†nh nhi·ªÅu c√¥ng vi·ªác h∆°n.';
      } else {
        summary = 'B·∫°n ch∆∞a c√≥ c√¥ng vi·ªác n√†o. H√£y th√™m m·ªôt s·ªë c√¥ng vi·ªác ƒë·ªÉ b·∫Øt ƒë·∫ßu.';
      }

      return summary;
    } catch (error) {
      console.error("Error in fallback task summarization:", error);
      return "Kh√¥ng th·ªÉ t·∫°o b·∫£n t√≥m t·∫Øt t·∫°i th·ªùi ƒëi·ªÉm n√†y.";
    }
  },
  
  // Chat v·ªõi AI (ch·ªâ s·ª≠ d·ª•ng client-side)
  chat: async (message: string, chatHistory: ChatMessage[] = []): Promise<string> => {
    try {
      if (!(await initializeAI())) {
        return "Xin l·ªói, AI hi·ªán kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh API key.";
      }

      // T·∫°o context t·ª´ l·ªãch s·ª≠ chat
      const historyContext = chatHistory.length > 0
        ? chatHistory.map(msg => `${msg.role === 'user' ? 'Ng∆∞·ªùi d√πng' : 'AI'}: ${msg.content}`).join('\n')
        : '';

      const prompt = `
B·∫°n l√† Dr.AITime, m·ªôt tr·ª£ l√Ω AI th√¥ng minh chuy√™n v·ªÅ qu·∫£n l√Ω th·ªùi gian v√† c√¥ng vi·ªác.

${historyContext ? `L·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán:\n${historyContext}\n` : ''}

Ng∆∞·ªùi d√πng: ${message}

H√£y tr·∫£ l·ªùi m·ªôt c√°ch th√¢n thi·ªán, h·ªØu √≠ch v√† chuy√™n nghi·ªáp. T·∫≠p trung v√†o:
- Qu·∫£n l√Ω th·ªùi gian
- T·ªï ch·ª©c c√¥ng vi·ªác
- TƒÉng nƒÉng su·∫•t
- L·ªùi khuy√™n th·ª±c t·∫ø

Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát v√† s·ª≠ d·ª•ng Markdown format ƒë·ªÉ l√†m cho c√¢u tr·∫£ l·ªùi d·ªÖ ƒë·ªçc h∆°n:
- S·ª≠ d·ª•ng **bold** cho c√°c ƒëi·ªÉm quan tr·ªçng
- S·ª≠ d·ª•ng danh s√°ch c√≥ d·∫•u ƒë·∫ßu d√≤ng cho c√°c b∆∞·ªõc ho·∫∑c g·ª£i √Ω
- S·ª≠ d·ª•ng > blockquote cho c√°c l·ªùi khuy√™n ƒë·∫∑c bi·ªát
- S·ª≠ d·ª•ng \`code\` cho c√°c thu·∫≠t ng·ªØ k·ªπ thu·∫≠t
- S·ª≠ d·ª•ng ### cho ti√™u ƒë·ªÅ ph·ª• n·∫øu c·∫ßn`;

      const result = await model.generateContent(prompt);
      return result.response.text().trim();
    } catch (error) {
      console.error("Error in AI chat:", error);
      return "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng ki·ªÉm tra API key v√† th·ª≠ l·∫°i.";
    }
  },

  // Chat streaming v·ªõi Gemini
  chatStream: async function* (message: string, chatHistory: ChatMessage[] = []): AsyncGenerator<string, void, unknown> {
    try {
      if (!(await initializeAI())) {
        yield "Xin l·ªói, AI hi·ªán kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh API key.";
        return;
      }

      const historyContext = chatHistory.length > 0
        ? chatHistory.map(msg => `${msg.role === 'user' ? 'Ng∆∞·ªùi d√πng' : 'AI'}: ${msg.content}`).join('\n')
        : '';

      const prompt = `
B·∫°n l√† Dr.AITime, m·ªôt tr·ª£ l√Ω AI th√¥ng minh chuy√™n v·ªÅ qu·∫£n l√Ω th·ªùi gian v√† c√¥ng vi·ªác.

${historyContext ? `L·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán:\n${historyContext}\n` : ''}

Ng∆∞·ªùi d√πng: ${message}

H√£y tr·∫£ l·ªùi m·ªôt c√°ch th√¢n thi·ªán, h·ªØu √≠ch v√† chuy√™n nghi·ªáp. T·∫≠p trung v√†o:
- Qu·∫£n l√Ω th·ªùi gian
- T·ªï ch·ª©c c√¥ng vi·ªác
- TƒÉng nƒÉng su·∫•t
- L·ªùi khuy√™n th·ª±c t·∫ø

Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát v√† s·ª≠ d·ª•ng Markdown format ƒë·ªÉ l√†m cho c√¢u tr·∫£ l·ªùi d·ªÖ ƒë·ªçc h∆°n:
- S·ª≠ d·ª•ng **bold** cho c√°c ƒëi·ªÉm quan tr·ªçng
- S·ª≠ d·ª•ng danh s√°ch c√≥ d·∫•u ƒë·∫ßu d√≤ng cho c√°c b∆∞·ªõc ho·∫∑c g·ª£i √Ω
- S·ª≠ d·ª•ng > blockquote cho c√°c l·ªùi khuy√™n ƒë·∫∑c bi·ªát
- S·ª≠ d·ª•ng \`code\` cho c√°c thu·∫≠t ng·ªØ k·ªπ thu·∫≠t
- S·ª≠ d·ª•ng ### cho ti√™u ƒë·ªÅ ph·ª• n·∫øu c·∫ßn`;

      const result = await model.generateContentStream(prompt);

      for await (const chunk of result.stream) {
        const chunkText = chunk.text();
        if (chunkText) {
          yield chunkText;
        }
      }
    } catch (error) {
      console.error("Error in AI chat stream:", error);
      yield "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng ki·ªÉm tra API key v√† th·ª≠ l·∫°i.";
    }
  },

  // K√≠ch ho·∫°t API Gemini khi c√≥ API key
  initWithApiKey: (apiKey: string) => {
    try {
      genAI = new GoogleGenerativeAI(apiKey);
      model = genAI.getGenerativeModel({ model: "gemini-2.5-flash-preview-05-20" });
      console.log("AI service initialized with API key");
      return true;
    } catch (error) {
      console.error("Error initializing AI service:", error);
      return false;
    }
  },

  // Ki·ªÉm tra tr·∫°ng th√°i AI
  isAvailable: (): boolean => {
    return !!model;
  }
};